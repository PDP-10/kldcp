COMMENT ⊗   VALID 00009 PAGES
C REC  PAGE   DESCRIPTION
C00001 00001
C00003 00002	  1) KLDCP.PAL[ETH,REG] and 2) KLDCP.PAL[KL,SYS]	8-31-80 12:44	pages 1,1
C00008 00003	  1) PRM11.PAL[ETH,REG] and 2) PRM11.PAL[KL,SYS]	8-31-80 12:45	pages 1,1
C00010 00004	  1) CONS11.PAL[ETH,REG] and 2) CONS11.PAL[KL,SYS]	8-31-80 12:45	pages 4,4
C00021 00005	  1) SUB11.PAL[ETH,REG] and 2) SUB11.PAL[KL,SYS]	8-31-80 12:45	pages 2,2
C00029 00006	  1) DTA11.PAL[ETH,REG] and 2) DTA11.PAL[KL,SYS]	8-31-80 12:46	pages 27,27
C00031 00007	  1) BR11.PAL[ETH,REG] and 2) BR11.PAL[KL,SYS]	8-31-80 12:48	pages 8,8
C00032 00008	  1) SBST11.PAL[ETH,REG] and 2) SBST11.PAL[KL,SYS]	8-31-80 12:48	pages 1,1
C00036 00009	  1) BOOT.PAL[ETH,REG] and 2) BOOT.PAL[KL,SYS]	8-31-80 12:49	pages 1,1
C00039 ENDMK
C⊗;
  1) KLDCP.PAL[ETH,REG] and 2) KLDCP.PAL[KL,SYS]	8-31-80 12:44	pages 1,1

**** File 1) KLDCP.PAL[ETH,REG]/2P/4L
1)	DECVER==010
1)	MCNVER==0
1)	SAILVR==7	;STANFORD VERSION NUMBER.  (DEFINING SAILVR MAKES STANFORD ASSEMBLY)
1)	
1)			
1)	.TITLE	KLDCP	WAITS KL10/PDP-11 CONSOLE PROGRAM, VER 0.10
1)	
**** File 2) KLDCP.PAL[KL,SYS]/2P/4L
2)	DECVER==007
2)	MCNVER==0
2)	SAILVR==6	;STANFORD VERSION NUMBER.  (DEFINING SAILVR MAKES STANFORD ASSEMBLY)
2)	
2)			
2)	.TITLE	KLDCP	KL10/PDP-11 DIAGNOSTIC CONSOLE PROGRAM, VER 0.7
2)	
***************


**** File 1) KLDCP.PAL[ETH,REG]/2P/33L
1)	;7	 4/29/80	JEP (Jim Powell) & REG to support ethernet and QM protocol
1)	;			Through 7/80
1)	
**** File 2) KLDCP.PAL[KL,SYS]/2P/33L
2)	


**** File 1) KLDCP.PAL[ETH,REG]/3P/5L
1)	DTEDEF= 1	;DEFINE DTE OFFSET ADDRESSES
1)	DVSASB=	1	;ASSEMBLE DEVICE SERVICE
**** File 2) KLDCP.PAL[KL,SYS]/3P/5L
2)	DVSASB=	1	;ASSEMBLE DEVICE SERVICE
***************


**** File 1) KLDCP.PAL[ETH,REG]/3P/23L
1)	%%QMP==1	;Assemble queued message protocol,
1)				;front-end reloads from WAITS
1)				;ethernet support
1)	
**** File 2) KLDCP.PAL[KL,SYS]/3P/22L
2)	
***************


**** File 1) KLDCP.PAL[ETH,REG]/3P/65L
1)	$DTQMP= 460	;DTE20 11 TELLS 10 THE SIZE OF A TO10 TRANSFER
1)	
**** File 2) KLDCP.PAL[KL,SYS]/3P/61L
2)	
***************


**** File 1) KLDCP.PAL[ETH,REG]/5P/7L
1)				;Parameters file
1)	.INSRT	PRM11.PAL
1)	
1)				;Starting vectors & other constant code
1)	.INSRT	BEG11.PAL
1)	
1)				;console code
1)	.INSRT	CONS11.PAL
1)	
1)				;breakpoints
1)	.LIF DF BPTASB	
1)	  .INSRT  BPNT11.PAL
1)	
1)				;subroutines, EMT dispatch, Initialization
1)	.INSRT	SUB11.PAL
1)	
1)				;KL10 C-Ram/D-Ram functions
1)	.INSRT	FD11.PAL		
1)	
1)				;Dectape
1)	.INSRT	DTA11.PAL
1)	
1)				;Disk boot for WAITS
1)	.LIF DF BOOASB
1)	  .INSRT  BOOT.PAL
1)	
1)				;RX01 floppies
1)	.LIF DF RXASB
1)	  .INSRT  FLOPPY.PAL
1)	
1)				;RP04 disk
1)	.LIF DF RPASB
1)	  .INSRT  RP0411.PAL
1)	
1)				;queued message protocol
1)	.LIF DF %%QMP
1)	  .INSRT  QMP11.PAL
1)	
1)				;File loading and command functions
1)	.INSRT	APT11.PAL		
1)	
1)				;PDP-11 Core Dump to A11 file
1)	;.INSRT	CDMP11.PAL
1)	
1)				;KL10 diagnostic functions
1)	.INSRT	BR11.PAL		
1)	
1)				;Storage definitions
1)	.INSRT	SBST11.PAL
1)	
1)	.END	$ILOAD		;initial startup in SUB11
**** File 2) KLDCP.PAL[KL,SYS]/5P/7L
2)	.INSRT	PRM11.PAL
2)	.INSRT	BEG11.PAL
2)	.INSRT	CONS11.PAL
2)	.LIF DF BPTASB
2)	  .INSRT  BPNT11.PAL
2)	.INSRT	SUB11.PAL
2)	.INSRT	FD11.PAL
2)	.INSRT	DTA11.PAL
2)	.LIF DF BOOASB
2)	  .INSRT  BOOT.PAL
2)	.LIF DF RXASB
2)	  .INSRT  FLOPPY.PAL
2)	.LIF DF RPASB
2)	  .INSRT  RP0411.PAL
2)	.INSRT	APT11.PAL
2)	;.INSRT	CDMP11.PAL
2)	.INSRT	BR11.PAL
2)	.INSRT	SBST11.PAL
2)	.END $ILOAD
***************
  1) PRM11.PAL[ETH,REG] and 2) PRM11.PAL[KL,SYS]	8-31-80 12:45	pages 1,1


**** File 1) PRM11.PAL[ETH,REG]/43P/1L
1)	.SBTTL EN11 - PDP11/ETHERNET INTERFACE MODULE DEVICE REGISTERS ETC.
1)	 
1)	ENOWC=160020		; ETHERNET DEVICE OUTPUT WORD COUNT REG
1)	ENOWA=ENOWC+2		; ETHERNET DEVICE OUTPUT WORD ADDR REG
1)	ENOCSR=ENOWC+4		; ETHERNET DEVICE OUTPUT CONTROL STATUS REG
1)	ENODLY=ENOWC+6		; ETHERNET DEVICE OUTPUT DELAY REG
1)	;
1)	ENIWC=ENOWC+10		; ETHERNET DEVICE INPUT WORD COUNT REG
1)	ENIWA=ENOWC+12		; ETHERNET DEVICE INPUT WORD ADDRESS REG
1)	ENICSR=ENOWC+14		; ETHERNET DEVICE INPUT CONTROL STATUS REG
1)	ENIADR=ENOWC+16		; ETHERNET DEVICE HARDWARE ADDRESS REGISTER
1)	;
1)	EN0BSZ=300.		; MAXIMUM SIZE OF ETHERNET INPUT BUFFER
1)	
1)	;DSKDMP BOOTSTRAP PARAMETERS
**** File 2) PRM11.PAL[KL,SYS]/43P/1L
2)	;DSKDMP BOOTSTRAP PARAMETERS
***************


  1) CONS11.PAL[ETH,REG] and 2) CONS11.PAL[KL,SYS]	8-31-80 12:45	pages 4,4

**** File 1) CONS11.PAL[ETH,REG]/4P/1L
1)	$$CONSL:CLR	RPTFLG		;Start here from 100014
1)		CLR	DVDIRF		;CLEAR DEVICE DIRECTORY FLAG
**** File 2) CONS11.PAL[KL,SYS]/4P/1L
2)	$$CONSL:CLR	RPTFLG
2)		CLR	DVDIRF		;CLEAR DEVICE DIRECTORY FLAG
***************


**** File 1) CONS11.PAL[ETH,REG]/6P/32L
1)	.LIF DF %%EOP
1)		.ASCII	/EP/		;SET EOP INTERVAL
**** File 2) CONS11.PAL[KL,SYS]/6P/32L
2)		.ASCII	/EP/		;SET EOP INTERVAL
***************


**** File 1) CONS11.PAL[ETH,REG]/7P/26L
1)	.LIF DF %%EOP
1)		.EP			;SET EOP INTERVAL
**** File 2) CONS11.PAL[KL,SYS]/7P/26L
2)		.EP			;SET EOP INTERVAL
***************


**** File 1) CONS11.PAL[ETH,REG]/19P/71L
1)		PCFTE USER,134,340
1)		PCFTE IOTUSR,136,4
**** File 2) CONS11.PAL[KL,SYS]/19P/71L
2)		PCFTE USER,134,-40
2)		PCFTE IOTUSR,136,4
***************


**** File 1) CONS11.PAL[ETH,REG]/39P/20L
1)	.LIF DF %%QMP
1)		JSR	PC,SND10		;CHECK FOR QUEUED MESSAGE FOR 10
1)	
1)	.LIF NDF %%QMP
1)		BIT	#TO11DB,@.STDTE		;IS PDP-10 REQUESTING SERVICE?
1)	
1)	.LIF DF %%QMP
1)		TST	T11DBF			;IS PDP-10 REQUESTING SERVICE?
1)	
1)		BNE	TENCMD			;YES.
**** File 2) CONS11.PAL[KL,SYS]/39P/20L
2)	
2)		BIT	#TO11DB,@.STDTE		;IS PDP-10 REQUESTING SERVICE?
2)		BNE	TENCMD			;YES.
***************


**** File 1) CONS11.PAL[ETH,REG]/40P/62L
1)		SETFLG
1)		  MTTYOF		;SET OUTPUT IN PROGRESS FLAG (even if not true)
1)		BR	$$TDX
**** File 2) CONS11.PAL[KL,SYS]/40P/62L
2)		BR	$$TDX
***************


**** File 1) CONS11.PAL[ETH,REG]/41P/1L
1)	.SBTTL	PDP-10 RUN TIME SUPPORT		;TENCMD
1)	
**** File 2) CONS11.PAL[KL,SYS]/41P/1L
2)	.SBTTL	PDP-10 RUN TIME SUPPORT
2)	
***************


**** File 1) CONS11.PAL[ETH,REG]/41P/33L
1)		QMPCMD		;14 COMMAND FOR QMP (TO11 ITEM COUNT)
1)		C10DNX		;15-17 UNUSED NOW
**** File 2) CONS11.PAL[KL,SYS]/41P/33L
2)		C10DNX		;14-17 UNUSED NOW
***************


**** File 1) CONS11.PAL[ETH,REG]/41P/37L
1)	
1)	C10DON:
1)	.IIF NDF %%QMP,	MOV	#INT11C,@.STDTE		;CLEAR DONG
1)	.IIF DF %%QMP,	CLR	T11DBF			;CLEAR SOFTWARE DONG
1)	.IIF NE EPTREL,	MOV	#XEPT!PRTOFF,$TADSP	;SET ADDR MODE FOR NEXT EXDEP
**** File 2) CONS11.PAL[KL,SYS]/41P/36L
2)		C10DNX
2)	
2)	C10DON:	MOV	#INT11C,@.STDTE	;CLEAR DONG
2)	.IIF NE EPTREL,	MOV	#XEPT!PRTOFF,$TADSP	;SET ADDR MODE FOR NEXT EXDEP
***************


**** File 1) CONS11.PAL[ETH,REG]/41P/44L
1)		 BCS	C10DNX		;next page.
1)		JMP	$RUNLP		;WAIT FOR NEXT COMMAND
1)	
1)	
1)	;C10DNX, TENCERR
1)	
1)	.IF NDF %%QMP
1)	QMPCMD:			;COMMAND UNDEFINED IF NO QMP
1)	.ENDC
1)	
**** File 2) CONS11.PAL[KL,SYS]/41P/42L
2)		 BCS	C10DNX
2)		JMP	$RUNLP		;WAIT FOR NEXT COMMAND
2)	
***************


**** File 1) CONS11.PAL[ETH,REG]/42P/10L
1)	TENCERR:CLR	TENRUN
**** File 2) CONS11.PAL[KL,SYS]/41P/48L
2)	
2)	TENCERR:CLR	TENRUN
***************


**** File 1) CONS11.PAL[ETH,REG]/42P/60L
1)	
1)	
1)	;C10TO, C10TI
1)	
1)	C10TO:	SETFLG			;TEN TO ELEVEN FOR TYPEOUT
1)		  TENTTY		;ALLOW "TENCHR" TO OPERATE
**** File 2) CONS11.PAL[KL,SYS]/42P/51L
2)	
2)	C10TO:	SETFLG
2)		  TENTTY		;ALLOW "TENCHR" TO OPERATE
***************


**** File 1) CONS11.PAL[ETH,REG]/43P/11L
1)	C10TI:	CLR	DDTFLG		;TTY INPUT TO 10
1)		CMP	#$OUTBF,$OUTPT	;ANY OUTPUT WAITING ?
**** File 2) CONS11.PAL[KL,SYS]/43P/9L
2)	C10TI:	CLR	DDTFLG
2)		CMP	#$OUTBF,$OUTPT	;ANY OUTPUT WAITING ?
***************


**** File 1) CONS11.PAL[ETH,REG]/44P/1L
1)	;Switch functions.  C10SW
1)	
1)	C10SW:	MOV	R5,R1 		;LOAD SWITCHES INTO FROM 11 WORD
1)		BIC	#177774,R1	;2 BIT SUBFUNCTION
**** File 2) CONS11.PAL[KL,SYS]/44P/1L
2)	C10SW:				;LOAD SWITCHES INTO FROM 11 WORD
2)		MOV	R5,R1
2)		BIC	#177774,R1	;2 BIT SUBFUNCTION
***************


**** File 1) CONS11.PAL[ETH,REG]/44P/7L
1)	
1)	C10SWT:	C10SW0			;NORMAL SWITCH READ
**** File 2) CONS11.PAL[KL,SYS]/44P/6L
2)	C10SWT:	C10SW0			;NORMAL SWITCH READ
***************


**** File 1) CONS11.PAL[ETH,REG]/45P/27L
1)	C10X1:	JMP	C10DON
1)	
**** File 2) CONS11.PAL[KL,SYS]/45P/27L
2)	C10X1:	BR	C10X
2)	
***************


**** File 1) CONS11.PAL[ETH,REG]/45P/59L
1)	
1)	
1)	;Clock operations.  C10CLK
1)	
1)	C10CLK:	MOV	R5,R1
**** File 2) CONS11.PAL[KL,SYS]/45P/59L
2)	
2)	C10CLK:	MOV	R5,R1
***************


**** File 1) CONS11.PAL[ETH,REG]/46P/26L
1)	C10CX:	JMP	C10DON
1)	
**** File 2) CONS11.PAL[KL,SYS]/46P/24L
2)	C10CX:	BR	C10X1
2)	
***************


**** File 1) CONS11.PAL[ETH,REG]/47P/10L
1)		MOV	#$SWS10+2,R4	;Bits 4:15 + xxxx of new stuff
1)		MOV	#SWS10+2,R5	;old switches.
1)	
**** File 2) CONS11.PAL[KL,SYS]/47P/10L
2)		MOV	#$SWS10+2,R4
2)		MOV	#SWS10+2,R5
2)	
***************


**** File 1) CONS11.PAL[ETH,REG]/48P/27L
1)	DIAFND:	CLR	R0		;SET FOUND INDICATOR
1)	$DIAFX:	JMP	C10TIX		;USE 10 TTY INPUT ROUTINE
**** File 2) CONS11.PAL[KL,SYS]/48P/27L
2)	
2)	DIAFND:	CLR	R0		;SET FOUND INDICATOR
2)	
2)	$DIAFX:	JMP	C10TIX		;USE 10 TTY INPUT ROUTINE
***************


**** File 1) CONS11.PAL[ETH,REG]/48P/31L
1)	DIANF:	MOV	#-1,R0		;SET NOT FOUND INDICATOR
**** File 2) CONS11.PAL[KL,SYS]/48P/33L
2)	
2)	DIANF:	MOV	#-1,R0		;SET NOT FOUND INDICATOR
***************


**** File 1) CONS11.PAL[ETH,REG]/51P/43L
1)	4$:	TST	R3
**** File 2) CONS11.PAL[KL,SYS]/51P/43L
2)	
2)	4$:	TST	R3
***************


**** File 1) CONS11.PAL[ETH,REG]/60P/10L
1)		TST	DL11EFLG		;PRESENTLY ENABLED ?
1)		BEQ	1$			;NO
1)	
1)	KLUNK=.
1)		CLR	DL11EFLG		;YES, CLEAR IT
1)		PMSG	<KLINIK CLEARED>
**** File 2) CONS11.PAL[KL,SYS]/61P/10L
2)		TST	DL11EFLG	;PRESENTLY ENABLED ?
2)		BEQ	1$		;NO
2)	
2)	KLUNK=.
2)		CLR	DL11EFLG	;YES, CLEAR IT
2)		PMSG	<KLINIK CLEARED>
***************


**** File 1) CONS11.PAL[ETH,REG]/60P/18L
1)	1$:	CLR	@$FSTKS			;INITIALIZE
1)		BIS	#DLDTR!DLRTS,@$FSTKS	;SET DATA TERMINAL READY
1)		BIT	#DLCTS,@$FSTKS		;DO WE HAVE CLEAR TO SEND ?
1)		BEQ	FSDISC			;NO
1)		COM	DL11EFLG		;ENABLE KLINIK
1)		PMSG	<KLINIK ENABLED>
**** File 2) CONS11.PAL[KL,SYS]/61P/18L
2)	1$:	CLR	@$FSTKS		;INITIALIZE
2)		BIS	#DLDTR!DLRTS,@$FSTKS	;SET DATA TERMINAL READY
2)		BIT	#DLCTS,@$FSTKS	;DO WE HAVE CLEAR TO SEND ?
2)		BEQ	FSDISC		;NO
2)		COM	DL11EFLG	;ENABLE KLINIK
2)		PMSG	<KLINIK ENABLED>
***************


**** File 1) CONS11.PAL[ETH,REG]/61P/172L
1)	WAITS Console.  Password = /
1)	
1)	FSLOSM:	.ASCIZ /
1)	Wrong
1)	/
**** File 2) CONS11.PAL[KL,SYS]/62P/172L
2)	HELLO, THIS IS THE CONSOLE 11, WHO ARE YOU?
2)	/
2)	FSLOSM:	.ASCIZ /
2)	SORRY BUNKIE, BYE BYE
2)	/
***************


**** File 1) CONS11.PAL[ETH,REG]/61P/187L
1)	;HU command to KLDCP
1)	$HU:	TTITRM
**** File 2) CONS11.PAL[KL,SYS]/62P/187L
2)	$HU:	TTITRM
***************


  1) SUB11.PAL[ETH,REG] and 2) SUB11.PAL[KL,SYS]	8-31-80 12:45	pages 2,2


**** File 1) SUB11.PAL[ETH,REG]/2P/28L
1)	.IF DF %%QMP
1)		MOV	776,R1		;Save location 776
1)	.ENDC
1)	
1)		CLR	R0		;SET ENTIRE VECTOR AREA TO:
**** File 2) SUB11.PAL[KL,SYS]/2P/28L
2)		CLR	R0		;SET ENTIRE VECTOR AREA TO:
***************


**** File 1) SUB11.PAL[ETH,REG]/2P/38L
1)	.IF DF %%QMP
1)		CMP	R1,(PC)+	;did 776 contain JMP (R0)?
1)		JMP	(R0)		;if so, we were started by WAITS
1)		BNE	99$		;and must go into monitor mode.
1)		BIS	#100000,776	;set sign bit in 776.
1)	99$:
1)	.ENDC
1)	
1)		MOV	#$TIMOT,@#ERRVEC ;TIME OUT BUS ERROR VECTOR
**** File 2) SUB11.PAL[KL,SYS]/2P/34L
2)		MOV	#$TIMOT,@#ERRVEC ;TIME OUT BUS ERROR VECTOR
***************


**** File 1) SUB11.PAL[ETH,REG]/2P/106L
1)		PMSG	<\Stanford KLDCP - QMP/EN\>
1)		MOV	#SWS10,R0	;setup initial switches to 3,,600000
1)		CLR	(R0)+		;bits 20:35
1)		BIS	#17,(R0)+	;bits 04:19
1)		CLR	(R0)		;bits 0:3
1)	.IFF
**** File 2) SUB11.PAL[KL,SYS]/2P/94L
2)		PMSG	<\Stanford KLDCP\>
2)	.IFF
***************


**** File 1) SUB11.PAL[ETH,REG]/2P/140L
1)	4$:
1)	.IF DF %%QMP
1)		TST	776		;were we loaded and started by the 10?
1)		BGE	44$		;branch if not
1)		SETFLG
1)		  MONMODE
1)		SETFLG
1)		  TENRUN
1)		SETFLG
1)		  PRGRUN
1)		SETFLG
1)		  MTTYOF
1)	.ENDC
1)		
1)	44$:
1)	.LIF DF %%QMP
1)		JSR	PC,QMPINI	;initialize QMP
1)	
1)		JMP	CONSL		;NOW TO CONSOLE
1)	
**** File 2) SUB11.PAL[KL,SYS]/2P/124L
2)	4$:	JMP	CONSL		;NOW TO CONSOLE
2)	
***************


**** File 1) SUB11.PAL[ETH,REG]/3P/1L
1)	.SBTTL	SET EOP INTERVAL TALLY, ERROR EOP
1)	.IF NDF %%EOP
1)	
1)	$EOPSET:
1)	$EOP:
1)	$ERREOP:FATAL
1)	.ENDC
1)	
1)	.IF DF %%EOP
1)	$EOPSET:MOV	R0,$ENDCT	;SET EOP INTERVAL TALLY
**** File 2) SUB11.PAL[KL,SYS]/3P/1L
2)	.SBTTL	SET EOP INTERVAL TALLY
2)	
2)	$EOPSET:MOV	R0,$ENDCT	;SET EOP INTERVAL TALLY
***************


**** File 1) SUB11.PAL[ETH,REG]/3P/45L
1)	2$:	PMSG	<END PASS >
**** File 2) SUB11.PAL[KL,SYS]/3P/38L
2)	
2)	2$:	PMSG	<END PASS >
***************


**** File 1) SUB11.PAL[ETH,REG]/3P/58L
1)	$ERREOP:TST	MONCTL		;STAND ALONE ?
**** File 2) SUB11.PAL[KL,SYS]/4P/14L
2)	.SBTTL	ERROR EOP
2)	
2)	$ERREOP:TST	MONCTL		;STAND ALONE ?
***************


**** File 1) SUB11.PAL[ETH,REG]/3P/64L
1)	
1)	.ENDC
1)	
**** File 2) SUB11.PAL[KL,SYS]/4P/22L
2)	
***************


**** File 1) SUB11.PAL[ETH,REG]/4P/20L
1)		MOV	#$R5SAV+2,R0
1)		MOV	(SP)+,-(R0)	;R5 to $R5SAV
1)		MOV	(SP)+,-(R0)	;R4 to $R4SAV
1)		MOV	(SP)+,-(R0)	;R3 to $R3SAV
1)		MOV	(SP)+,-(R0)	;R2 to $R2SAV
1)		MOV	(SP)+,-(R0)	;R1 to $R1SAV
1)		MOV	(SP)+,.HCADR	;halt/continue address (if needed)
1)		MOV	(SP)+,$PSSAV	;halt/continue PS.
1)		MOV	SP,$SPSAV	;save dead SP
1)		PMSG	< HALT AT >
1)		MOV	.HCADR,R0	;GET ADDRESS
**** File 2) SUB11.PAL[KL,SYS]/5P/20L
2)		MOV	(SP)+,$R5SAV
2)		MOV	(SP)+,$R4SAV
2)		MOV	(SP)+,$R3SAV
2)		MOV	(SP)+,$R2SAV
2)		MOV	(SP)+,$R1SAV
2)		MOV	(SP)+,.HCADR
2)		MOV	(SP)+,$PSSAV
2)		MOV	SP,$SPSAV
2)		PMSG	< HALT AT >
2)	
2)		MOV	.HCADR,R0	;GET ADDRESS
***************


**** File 1) SUB11.PAL[ETH,REG]/4P/34L
1)		PFORCE
1)		CLR	R2		;REGISTER NUMBER
1)		MOV	#$R0SAV,R1	;REG SAVE TABLE POINTER
1)	1$:	PNTCI
1)		'R
1)		MOV	R2,R0		;register number
1)		PNTNBR			;PRINT REGISTER NUMBER
1)	4$:	PSLASH
1)	2$:	MOV	(R1)+,R0
1)		PNTOCT			;PRINT CONTENTS
1)		PCRLF
1)		INC	R2
1)		CMP	R2,#6
1)		BLT	1$		;loop for zero to 5
1)		BGT	3$		;exit for 7
1)		PNTCI
1)		"SP
1)		BR	4$		;print R6 as SP
1)	
1)	3$:	CLR	R2		;Count of stack frames
1)		MOV	$SPSAV,R1	;Stack top address
1)	91$:	MOV	R1,R0
1)		PNTOCT
1)		PSLASH
1)		MOV	(R1)+,R0
1)		PNTOCT			;PRINT CONTENTS
1)		PCRLF
1)		CMP	R1,#COREND
1)		BGE	92$
1)		INC	R2
1)		CMP	R2,#6
1)		BLT	91$		;loop to display several stack items
1)	92$:	TST	.HCFLG		;is this a continuable halt?
1)		BEQ	93$		;BR if not
1)		JMP	$CONSL		;RETURN TO MONITOR
1)	
1)	93$:
1)	.LIF DF %%DDT
1)		JMP	56000
1)	
1)	.LIF NDF %%DDT
1)		JMP	$SBRINT		;major crash.  nearly major reload
1)	
**** File 2) SUB11.PAL[KL,SYS]/5P/34L
2)		JMP	$CONSL		;RETURN TO MONITOR
2)	
***************


**** File 1) SUB11.PAL[ETH,REG]/8P/44L
1)		TST	CTRLOF
**** File 2) SUB11.PAL[KL,SYS]/9P/44L
2)	
2)		TST	CTRLOF
***************


**** File 1) SUB11.PAL[ETH,REG]/36P/8L
1)	$EMTRP:	CMP	SP,#$$STKM		;check against stack bottom
1)		BLE	$STUF			;OFF BOTTOM OF STACK
**** File 2) SUB11.PAL[KL,SYS]/38P/8L
2)	$EMTRP:	CMP	SP,#COREND-600+20
2)		BLE	$STUF			;OFF BOTTOM OF STACK
***************


  1) DTA11.PAL[ETH,REG] and 2) DTA11.PAL[KL,SYS]	8-31-80 12:46	pages 27,27

**** File 1) DTA11.PAL[ETH,REG]/27P/43L
1)	30$:	.BYTE	340,' ,' 	;SPACE
1)		.BYTE	367,'$,'$	;DOLLAR SIGN
1)		.BYTE	356,'.,'.	;PERIOD
1)		.BYTE	356,'0,'9	;DIGITS
1)		.BYTE	300,'A,'Z	;UPPER CASE LETTERS
1)	;	.ENABL	LC
1)		.BYTE	240,'a,'z	;LOWER CASE LETTERS
1)		.BYTE	0		;INDICATE THE END OF THE TABLE
**** File 2) DTA11.PAL[KL,SYS]/27P/43L
2)	30$:	.BYTE	-40,' ,' 	;SPACE
2)		.BYTE	-11,'$,'$	;DOLLAR SIGN
2)		.BYTE	-22,'.,'.	;PERIOD
2)		.BYTE	-22,'0,'9	;DIGITS
2)		.BYTE	-100,'A,'Z	;UPPER CASE LETTERS
2)	;	.ENABL	LC
2)		.BYTE	-140,'a,'z	;LOWER CASE LETTERS
2)		.BYTE	0		;INDICATE THE END OF THE TABLE
***************


  1) BR11.PAL[ETH,REG] and 2) BR11.PAL[KL,SYS]	8-31-80 12:48	pages 8,8

**** File 1) BR11.PAL[ETH,REG]/8P/36L
1)	.IF DF %%QMP
1)	;For QMP11, include INTRON in new DTE status
1)		MOV	#INTRON!DON10C!ERR10C!INT11C!PERCLR!DON11C!ERR11C,@.STDTE ;CLEAR DTE20 STATUS
1)	.IFF
1)		MOV	#DON10C!ERR10C!INT11C!PERCLR!DON11C!ERR11C,@.STDTE ;CLEAR DTE20 STATUS
1)	.ENDC
1)		DFWRTT			;WRITE TO CLOCK
**** File 2) BR11.PAL[KL,SYS]/8P/36L
2)		MOV	#DON10C!ERR10C!INT11C!PERCLR!DON11C!ERR11C,@.STDTE ;CLEAR DTE20 STATUS
2)		DFWRTT			;WRITE TO CLOCK
***************


  1) SBST11.PAL[ETH,REG] and 2) SBST11.PAL[KL,SYS]	8-31-80 12:48	pages 1,1


**** File 1) SBST11.PAL[ETH,REG]/2P/10L
1)	
1)	.IF	DF KLDCP
1)	;DECISION TABLES FOR KL10/11 SUBROUTINE PACKAGE
**** File 2) SBST11.PAL[KL,SYS]/2P/10L
2)	INFORM	PROGRAM END,\.
2)	
2)	;.NLIST
2)	.IF	DF KLDCP
2)	;.LIST
2)	;DECISION TABLES FOR KL10/11 SUBROUTINE PACKAGE
***************


**** File 1) SBST11.PAL[ETH,REG]/2P/48L
1)	.ENDC	;IF DF KLDCP
1)	
1)	INFORM	PROGRAM END,\.
1)	
1)	;THIS SECTION CONTAINS ALL PROGRAM TEXT LITERALS
**** File 2) SBST11.PAL[KL,SYS]/2P/51L
2)	;.NLIST
2)	.ENDC	;IF DF KLDCP
2)	;.LIST
2)	;THIS SECTION CONTAINS ALL PROGRAM TEXT LITERALS
***************


**** File 1) SBST11.PAL[ETH,REG]/2P/63L
1)	;PATCH:	.BLKW 40
1)	PATEND==.
**** File 2) SBST11.PAL[KL,SYS]/2P/65L
2)	PATCH:	.BLKW 40
2)	PATEND==.
***************


**** File 1) SBST11.PAL[ETH,REG]/3P/3L
1)	$$BUF==	COREND-520		;ROOM FOR STACK
1)	$$STKM==$$BUF			;Bottom boundary of stack
1)	
**** File 2) SBST11.PAL[KL,SYS]/3P/3L
2)	$$BUF==	COREND-600		;ROOM FOR STACK
2)	
***************


**** File 1) SBST11.PAL[ETH,REG]/4P/64L
1)	
1)	.IF DF %%QMP
1)		.BUFW	T11DBF		;NON-ZERO TO TELL CONSOL THAT DOORBELL RANG
1)		.BUFW	DTEBSY		;NON-ZERO IF DTE IS BUSY WITH TO10 TRANSFER
1)		.BUFW	DTEBCT		;this is the count of times we saw DTE busy
1)		.BUFW	EN0PKO		;COUNT OF OUTPUT PACKETS SENT
1)		.BUFW	EN0ER1		;COUNT OF OUTPUT PACKETS SENT WITH ERROR
1)		.BUFW	EN0PER		;COUNT OF PERMANENT ERRORS ON OUTPUT PACKETS
1)		.BUFW	EN0PKI		;COUNT OF INPUT PACKETS RECEIVED ERROR FREE
1)		.BUFW	EN0ER2		;COUNT OF INPUT PACKETS RECEIVED WITH ERRORS
1)		.BUFW	EN0MEM		;REJECTED PACKETS, NO BUFFER AVAILABLE
1)		.BUFW	EN0TRY		;RETRY COUNT FOR PACKET OUTPUT
1)		.BUFW	EN0BUF		;ADDRESS OF ETHERNET INPUT BUFFER
1)		.BUFW	COUN10,3	;FIRST WORD OF 3 FOR DEPOSIT IN 10 MEMORY
1)		.BUFW	EN0DLY,10	;DELAY TABLE FOR ETHERNET DELAYS
1)		.BUFW	TO10Q,2		;TWO WORD QUEUE HEAD FOR TO10 QUEUE
1)		.BUFW	ENETQ,2		;TWO WORD QUEUE HEAD FOR ETHERNET QUEUE
1)		.BUFW	FR10Q,2		;TWO WORD QUEUE HEAD FOR FR10 QUEUE
1)	;	.BUFW	FREEAD		;ADDRESS OF BEGINNING OF FREE MEMORY
1)	;	.BUFW	FREESZ		;SIZE OF FREE MEMORY (4K WORDS TEMPORARILY)
1)		.BUFW	FREEQ,2		;ADDRESS OF FIRST POSSIBLE FREE BLOCK
1)		.BUFW	QMPRQS		;Saved request size for to11 xfer
1)		.BUFW	ENIHAD		;Saved copy of "real" e/n host address
1)	.ENDC ;DF %%QMP
1)	.ENDC
**** File 2) SBST11.PAL[KL,SYS]/4P/64L
2)	.ENDC
***************

  1) BOOT.PAL[ETH,REG] and 2) BOOT.PAL[KL,SYS]	8-31-80 12:49	pages 1,1


**** File 1) BOOT.PAL[ETH,REG]/2P/3L
1)	;bootbg is located in 11 high core (152210)
1)	;bootsz is 2260
1)	
1)	;LD Command to load the bootstrap code from the dectape into 11 memory.
1)	
1)	.IF DF BOOASB
**** File 2) BOOT.PAL[KL,SYS]/2P/3L
2)	.IF DF BOOASB
***************


**** File 1) BOOT.PAL[ETH,REG]/3P/3L
1)	$DS:	TTITRM
**** File 2) BOOT.PAL[KL,SYS]/3P/3L
2)	;COPY DSKDMP BOOT INTO PDP-10 AND START IT
2)	
2)	$DS:	TTITRM
***************


**** File 1) BOOT.PAL[ETH,REG]/3P/8L
1)		PMSG <?LOAD DSKDMP - USE LD>
1)		JMP $CNTLC
**** File 2) BOOT.PAL[KL,SYS]/3P/10L
2)		PMSG <?DSKDMP BOOT NOT LOADED - USE LD>
2)		JMP $CNTLC
***************


**** File 1) BOOT.PAL[ETH,REG]/3P/15L
1)		PMSG <FIX PARITY ENABLES - PE 36>
1)		JMP $CNTLC
**** File 2) BOOT.PAL[KL,SYS]/3P/17L
2)		PMSG <BAD PARITY ENABLES, TYPE PE 36 FIRST>
2)		JMP $CNTLC
***************


**** File 1) BOOT.PAL[ETH,REG]/3P/20L
1)		PMSG <SOME CACHE DISABLED - USE CE 17\>
1)	4$:	MOV #L10ADR+2,R3
**** File 2) BOOT.PAL[KL,SYS]/3P/22L
2)		PMSG <WARNING!  SOME CACHES DISABLED - TYPE CE 17 TO ENABLE ALL\>
2)	4$:	MOV #L10ADR+2,R3
***************


**** File 1) BOOT.PAL[ETH,REG]/3P/42L
1)	DSVER:	PMSG <DEX ERROR IN DS>
1)		JMP $CNTLC
**** File 2) BOOT.PAL[KL,SYS]/3P/44L
2)	DSVER:	PMSG <DEPOSIT/EXAMINE ERROR IN DS>
2)		JMP $CNTLC
***************


